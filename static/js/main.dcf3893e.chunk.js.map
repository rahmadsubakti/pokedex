{"version":3,"sources":["component/LoadAnimation/LoadAnimation.js","component/Card/Card.js","component/TypeFilter/TypeFilter.js","component/Modal/Modal.js","component/PokeInfo/PokeInfo.js","App.js","serviceWorker.js","index.js"],"names":["LoadAnimation","className","Card","props","state","name","sprites","types","stat","loading","matchType","fetchPokemon","bind","checkTypes","this","setState","url","fetch","then","res","json","front_default","stats","Set","size","length","prevProps","value","onClick","src","alt","map","val","type","key","React","Component","TypeFilter","results","Fragment","idx","onChange","body","document","ModalBase","element","createElement","appendChild","removeChild","createPortal","children","Modal","PokeInfo","pokemon","weight","height","moves","move","base_stat","App","data","pokemonBasedType","next","current","showModal","limit","timeout","fetchAPI","fetchType","handleClick","handleKeyUp","filterPokemonByType","prevState","list","filter","includes","e","preventDefault","target","querySelectorAll","forEach","el","checked","pattern","RegExp","test","clearTimeout","setTimeout","pokemonList","slice","placeholder","onKeyUp","handleCheckboxChange","disabled","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dcf3893e.chunk.js","sourcesContent":["import React from 'react'\nimport './loader.css'\n\nexport function LoadAnimation() {\n\treturn (\n\t\t<div className=\"load-animation\"><div></div></div>\n\t\t)\n}","import React from 'react'\n\nimport { LoadAnimation } from 'component/LoadAnimation/LoadAnimation'\n\nimport 'style/type-color.css';\nimport './card.css'\n\nexport class Card extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { name: '', sprites: '', types: [], stat: [], loading: false, matchType: true }\n        this.fetchPokemon = this.fetchPokemon.bind(this)\n        this.checkTypes = this.checkTypes.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true })\n        this.fetchPokemon(this.props.url)\n    }\n\n    fetchPokemon(url) {\n        fetch(url)\n            .then(res => res.json())\n            .then(res => this.setState({\n                name: res.name,\n                sprites: res.sprites.front_default,\n                types: res.types,\n                stat: res.stats,\n                loading: false\n            }))\n\n    }\n\n    checkTypes() {\n        const set = new Set([...this.props.types, ...this.state.types])\n        return set.size === this.state.types.length;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.url !== prevProps.url) {\n            this.setState({ loading: true })\n            this.fetchPokemon(this.props.url)\n        }\n        if (this.props.types !== prevProps.types) {\n            this.setState({ matchType: this.checkTypes() })\n        }\n    }\n\n    render() {\n        if (this.state.matchType) {\n            if (!this.state.loading) {\n                return (\n                    <div className=\"card\" value={this.props.url} onClick={this.props.onClick}>\n\t\t\t\t\t\t<div className=\"img-container\">\n\t\t\t\t\t\t\t<img src={this.state.sprites} alt={this.state.name} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"pokemon-info\">\n\t\t\t\t\t\t\t<h2>{this.state.name}</h2>\n\t\t\t\t\t\t\t{this.state.types.map(val => \n                                <span \n                                    className={'type ' + val.type.name} \n                                    key={'type'+val.type.name}>\n                                        {val.type.name}\n                                </span>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n                        <button value={this.props.url} onClick={this.props.onClick}>View</button>\n\t\t\t\t\t</div>\n                )\n            }\n            return (\n                <div className=\"card\">\n\t\t\t\t\t<LoadAnimation />\n\t\t\t\t</div>\n            )\n        }\n    }\n}","import React from 'react';\nimport 'style/type-color.css';\nimport './type-filter.css';\n\nexport class TypeFilter extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {types: []}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://pokeapi.co/api/v2/type/')\n\t\t\t.then(res => res.json())\n\t\t\t.then(res => this.setState({types: res.results}))\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{this.state.types.map((val, idx) =>\n\t\t\t\t\t<div className='checkbox-container' key={'filter'+idx}>\n\t\t\t\t\t\t<label> \n\t\t\t\t\t\t\t<input type=\"checkbox\" onChange={this.props.onChange} value={val.url} />\n\t\t\t\t\t\t\t<span className={\"checkmark \" + val.name}>{val.name}</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</React.Fragment>\n\t\t\t)\n\t}\n}","import React from 'react';\nimport { createPortal } from 'react-dom';\nimport './modal.css'\n\nconst body = document.body;\n\nexport class ModalBase extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.element = document.createElement('div');\n\t\tthis.element.className = 'modal'\n\t}\n\n\tcomponentDidMount() {\n\t\tbody.appendChild(this.element);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tbody.removeChild(this.element);\n\t}\n\n\trender() {\n\t\treturn createPortal(this.props.children, this.element)\n\t}\n\n}\n\n\nexport function Modal(props) {\n\treturn (\n\t\t<ModalBase>\n\t\t\t<div className=\"modal-container\">\n            \t<div className=\"modal-close-container\">\n            \t\t{props.onClick &&\n            \t\t\t<button \n                \t\tonClick={props.onClick}\n                \t\tclassName=\"close-btn\"\n                    \tvalue=\"close\">\n                    \t\tx\n                  \t\t</button>\n            \t\t}\n                </div>\n                <div className=\"modal-content\">\n                  {props.children}\n                </div>\n            </div>\n        </ModalBase>\n\t)\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LoadAnimation } from 'component/LoadAnimation/LoadAnimation';\n\nimport 'style/type-color.css';\nimport './pokeinfo.css';\n\n\nexport class PokeInfo extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            pokemon: {},\n            loading: true,\n\n        }\n        this.fetchPokemon = this.fetchPokemon.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchPokemon(this.props.url)\n    }\n\n    fetchPokemon(url) {\n        fetch(url)\n            .then(res => res.json())\n            .then(res => this.setState({\n                pokemon: res,\n                loading: false\n            }))\n\n    }\n\n    render() {\n    \tconst pokemon = this.state.pokemon;\n    \tif (!this.state.loading) {\n        return (\n        \t<div className=\"pokemon\">\n        \t\t<div className=\"img-container\">\n        \t\t\t<img src={pokemon.sprites.front_default} alt={pokemon.sprites.front_default} />\n        \t\t</div>\n        \t\t<div className=\"pokemon-info\">\n        \t\t\t<div>\n        \t\t\t\t<h2>{pokemon.name}</h2>\n        \t\t\t</div>\n        \t\t\t<div className=\"pokemon-types\">\n        \t\t\t\t{pokemon.types.map(val => \n                            <span className={'type ' + val.type.name} key={'type'+val.type.name}>\n                                {val.type.name}\n                            </span>\n                        )}\n        \t\t\t</div>\n                    <h4>Body data</h4>\n        \t\t\t<div className=\"pokemon-body\">\n        \t\t\t\t<span>{pokemon.weight / 10 } cm</span>\n        \t\t\t\t<span>{pokemon.height * 10 } kg</span>\n        \t\t\t</div>\n                    <h4>Moves</h4>\n        \t\t\t<div className=\"pokemon-moves\">\n        \t\t\t\t{pokemon.moves.map((val, idx) => \n                            <span className=\"move\" key={'move'+idx}>\n                                {val.move.name}\n                            </span>\n                        )}\n        \t\t\t</div>\n                    <h4>Stats</h4>\n        \t\t\t<div className=\"pokemon-stats\">\n        \t\t\t\t<table>\n                            <tbody>\n        \t\t\t\t\t   {pokemon.stats.map((val,idx) => \n                                    <tr key={'tr'+idx}>\n                                        <td>{val.stat.name}</td>\n                                        <td>{val.base_stat}</td>\n                                    </tr>\n                                )}\n                            </tbody>\n        \t\t\t\t</table>\n        \t\t\t</div>\n        \t\t</div>\n        \t</div>\n        )\n    }\n    \treturn (\n            <div className=\"pokemon\">\n                <LoadAnimation />\n            </div>\n        )\n    }\n}\n\nPokeInfo.propTypes = {\n    url: PropTypes.string.isRequired\n}","import React from 'react';\n\nimport { Card } from 'component/Card/Card'\nimport { TypeFilter } from 'component/TypeFilter/TypeFilter'\nimport { Modal } from 'component/Modal/Modal'\nimport { PokeInfo } from 'component/PokeInfo/PokeInfo'\nimport { LoadAnimation } from 'component/LoadAnimation/LoadAnimation'\nimport './App.css';\nimport 'style/media.css';\n\n// Bug occured when typing in search box too fast\n// Causing pokemons whose name that does not match with word in search box\n// appeared as search result\n// Warning message advised to make this interaction asynchronous tasks\n// in componentWillUnmount (it might refer to card or handleChange)\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: [],\n            pokemon: [], // data to show to page\n            pokemonBasedType: [],\n            next: null,\n            current: '',\n            showModal: false,\n            limit: 20,\n            loading: true,\n        }\n        this.timeout = null;\n        this.fetchAPI = this.fetchAPI.bind(this);\n        this.fetchType = this.fetchType.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.filterPokemonByType = this.filterPokemonByType.bind(this)\n    }\n\n    fetchAPI(url) {\n        fetch(url)\n            .then(res => res.json())\n            .then(res => this.setState(prevState =>\n                ({\n                    data: [...prevState.data, ...res.results],\n                    pokemon: [...prevState.data, ...res.results],\n                    next: res.next,\n                })\n            ))\n            .then(() => this.state.next === null ? this.setState({loading: false}) : null)\n    }\n\n    fetchType(url) {\n        fetch(url)\n            .then(res => res.json())\n            .then(res => res.pokemon)\n            .then(res => res.map(val => val.pokemon.name))\n            .then(function(res) { return [{ url: url, list: res }] })\n            .then(res => this.setState(prevState => ({ pokemonBasedType: [...prevState.pokemonBasedType, ...res] })))\n            .then(res => this.filterPokemonByType())\n\n    }\n\n    filterPokemonByType() {\n        if (this.state.pokemonBasedType.length !== 0) {\n            const pokemonBasedType = this.state.pokemonBasedType[this.state.pokemonBasedType.length - 1].list;\n            let pokemon = [...this.state.pokemon]\n            pokemon = pokemon.filter(val => pokemonBasedType.includes(val.name))\n            this.setState({ pokemon: pokemon, limit: 20 })\n        }\n    }\n\n\n    componentDidMount() {\n        this.fetchAPI('https://pokeapi.co/api/v2/pokemon/')\n    }\n\n    componentDidUpdate() {\n        if (this.state.next !== null) {\n            this.fetchAPI(this.state.next);\n        }\n    }\n\n    handleClick(e) {\n        e.preventDefault();\n        switch (e.target.value) {\n            case 'next':\n                this.setState((prevState) => ({ limit: prevState.limit + 20 }));\n                break;\n            case 'prev':\n                this.setState((prevState) => ({ limit: prevState.limit - 20 }));\n                break;\n            case 'clear':\n                const checkboxes = document.querySelectorAll('input[type=checkbox]')\n                checkboxes.forEach(el => el.checked = false)\n                this.setState({ pokemon: this.state.data })\n                break;\n            case 'close':\n                this.setState({current: '', showModal: false})\n                break;\n            default:\n                this.setState({current: e.target.value, showModal: true})\n                break;\n        }\n    }\n\n    handleKeyUp(e) {\n        const pattern = new RegExp(e.target.value, 'i');\n        let pokemon = [...this.state.data];\n        pokemon = pokemon.filter(val => pattern.test(val.name))\n        clearTimeout(this.timeout)\n        this.timeout = setTimeout(function() {this.setState({pokemon:pokemon})}.bind(this), 1000)\n    }\n\n    handleCheckboxChange(e) {\n        if (e.target.checked) {\n            this.fetchType(e.target.value)\n        } else {\n            let types = [...this.state.pokemonBasedType]\n            this.setState({ pokemon: [...this.state.data], limit: 20 })\n            types = types.filter(val => val.url !== e.target.value)\n            this.setState({ pokemonBasedType: [...types] }, () => this.filterPokemonByType())\n        }\n    }\n\n    render() {\n        const limit = this.state.limit;\n\n        const pokemonList = this.state.pokemon.slice(limit - 20, limit).map((val, idx) =>\n            <Card url={val.url} types={this.state.types} onClick={this.handleClick} key={\"card\" + idx} />\n        )\n\n        return (\n            <div>\n              <header>\n                <input \n                  type=\"text\" \n                  placeholder=\"Search pokemon(s)\" \n                  onKeyUp={this.handleKeyUp}\n                />\n              </header>\n              <div className=\"filter-btn-group\">\n                <button onClick={this.handleClick} value=\"clear\">Clear</button>\n                <TypeFilter onChange={this.handleCheckboxChange.bind(this)} />\n              </div>\n              {this.state.loading \n                ?\n                  <Modal>\n                    <LoadAnimation />\n                  </Modal> \n                :\n                  <main>\n                    <div className=\"main-content\">\n                      {pokemonList}\n                    </div>\n\n                    <div className=\"btn-group\">\n                      <button \n                      onClick={this.handleClick} \n                      value=\"next\" \n                      disabled={this.state.limit >= this.state.pokemon.length}>\n                        Next\n                      </button>\n\n                      <button \n                        onClick={this.handleClick} \n                        value=\"prev\" \n                        disabled={(this.state.limit-20) === 0}>\n                          Previous\n                      </button>\n                    </div>\n                  </main>\n              }\n              \n            {this.state.showModal &&\n            <Modal onClick={this.handleClick}>\n              <PokeInfo url={this.state.current} />\n            </Modal>}\n\n          </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}